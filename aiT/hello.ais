# configure compiler
compiler "patmos-llvm";

interproc flexible, max-length=2, max-unroll=2, default-unroll=2;

#cache code size=256, associativity=2, line-size=32,policy=LRU, may=chaos; # PML machine configuration
#area 0x00000000 .. 0xffffffff access code read transfer-time = [5,1]; # PML machine configuration
#area 0x00000000 .. 0xffffffff access data read transfer-time = [5,1], data write time = 8; # PML machine configuration

# 4 KB instruction cache, 4-way LRU
# this is only used for non-locked regions, else the method cache is assumed to exist
cache instruction
    size = 4096, associativity = 4, line-size = 32,
    policy = LRU, may = chaos;

# 4 KB data cache, 4-way LRU, used only for load/store that don't bypass the cache
cache data
    size = 4096, associativity = 4, line-size = 32,
    policy = LRU, may = chaos;

# memory map with transfer timings
# first number == single beat access, second number == wait states per burst beat
area 0x00000000 .. 0xffffffff access
    # timing for code access
    code transfer-time = [8, 0],

    # if you uncomment the next line, method cache is used and always hit is assumed ATM
    #code locked,

    # timing for data read access
    data read transfer-time = [8, 0],

    # timing for data write	
    data write transfer-time = [4, 0];

#routine "_start" is interesting;

snippet routine "exit" is external
        and uses exactly 0 bytes of system stack
        and uses exactly 0 bytes of user stack
        and does not violate calling conventions
        and never returns;

snippet routine "__init" is external
        and uses exactly 0 bytes of system stack
        and uses exactly 0 bytes of user stack
        and does not violate calling conventions;

snippet routine "__initreent" is external
        and uses exactly 0 bytes of system stack
        and uses exactly 0 bytes of user stack
        and does not violate calling conventions;

snippet routine "_sbrk" is not analyzed
        and uses exactly 0 bytes of system stack
        and uses exactly 0 bytes of user stack
        and does not violate calling conventions;

snippet routine "__patmos_lock_acquire_recursive"  is not analyzed
        and uses exactly 0 bytes of system stack
        and uses exactly 0 bytes of user stack
        and does not violate calling conventions;

snippet 0x20220 is not analyzed;

ais2 { instruction 0x21144 {
         enter with:
             reg("r27") = 0x40000,
             reg("r28") = 0x40000;
     }   }

routine "_sc_reserve" violates calling conventions;
routine "_sc_ensure" violates calling conventions;
routine "_sc_free" violates calling conventions;